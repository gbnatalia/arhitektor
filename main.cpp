/**
 * 1. Спроектировать абстрактный класс «Car» у которого должны
 * быть свойства: марка, модель, цвет, тип кузова, число колёс, тип
 * топлива, тип коробки передач, объём двигателя; методы:
 * движение, обслуживание, переключение передач, включение
 * фар, включение дворников.
 *
 * 2. Создать конкретный автомобиль путём наследования класса
 * «Car».
 *
 * 3. Расширить абстрактный класс «Car», добавить метод: подметать
 * улицу. Создать конкретный автомобиль путём наследования
 * класса «Car». Провести проверку принципа SRP.
 *
 * 4. Расширить абстрактный класс «Car», добавить метод:
 * включение противотуманных фар, перевозка груза. Провести
 * проверку принципа OCP.
 *
 * 5. Создать конкретный автомобиль путём наследования класса
 * «Car», определить число колёс = 3. Провести проверку принципа LSP.
 *
 * 6. Создать конкретный автомобиль путём наследования класса
 * «Car», определить метод «движение» - «полёт». Провести
 * проверку принципа LSP.
 *
 * 7. Создать интерфейс «Заправочная станция», создать метод:
 * заправка топливом.
 *
 * 8. Имплементировать метод интерфейса «Заправочная станция» в
 * конкретный класс «Car».
 *
 * 9. Добавить в интерфейс «Заправочная станция» методы: протирка
 * лобового стекла, протирка фар, протирка зеркал.
 *
 * 10. Имплементировать все методы интерфейса «Заправочная
 * станция» в конкретный класс «Car». Провести проверку
 * принципа ISP. Создать дополнительный/е интерфейсы и
 * имплементировать их в конкретный класс «Car». Провести
 * проверку принципа ISP.
 *
 * 11. Создать путём наследования класса «Car» два
 * автомобиля: с бензиновым и дизельным двигателями,
 * имплементировать метод «Заправка топливом» интерфейса
 * «Заправочная станция». Реализовать заправку каждого
 * автомобиля подходящим топливом. Провести проверку принципа DIP.
 *
 * TODO: Домашнее задание:
 * Доработать приложение, спроектированное на семинаре. Добавить тип, описывающий "автомойку".
 * Продемонстрировать работу получившейся программы,
 * создать несколько типов автомобилей,
 * загнать каждый автомобиль на заправку, а затем и на автомойку.
 * @param args
 */

#include <iostream>
#include <list>
#include "Car.hpp"

int main() {

    // заправки
    RefuelingStation    refuelingStation1;
    RefuelingStationV2  refuelingStation2;

    // автомойки
    Wiping1 wiping1;
    Wiping2 wiping2;

    list<Car* > cars;

    SportCar * sportCar= new SportCar("C", "D", Color::RED);
    sportCar->setRefuelingStation(&refuelingStation1);
    sportCar->setWiping(&wiping1);
    cars.push_back(sportCar);


    Harvester * harvester= new Harvester("A", "B", Color::BLACK);
    harvester->setRefuelingStation(&refuelingStation2);
    harvester->setWiping(&wiping2);
    cars.push_back(harvester);


    for (auto car : cars){
        // заправили
        car->fuel();

        // помыли
        car->wip();
    }

    return 0;
}
